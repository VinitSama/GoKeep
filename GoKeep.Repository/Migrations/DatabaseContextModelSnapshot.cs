// <auto-generated />
using System;
using GoKeep.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GoKeep.Repository.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GoKeep.Repository.LabelEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("isActive");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK__Labels__3213E83F9116D622");

                    b.HasIndex(new[] { "UserId", "Name", "IsActive" }, "UniqueActiveLabelPerUser")
                        .IsUnique();

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("GoKeep.Repository.NoteEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("createdAt")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("DeleteForever")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isArchived");

                    b.Property<bool>("IsPinned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isPinned");

                    b.Property<bool>("IsTrashed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("isTrashed");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedAt")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("userId");

                    b.HasKey("Id")
                        .HasName("PK__Notes__3213E83F66741E52");

                    b.HasIndex("UserId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("GoKeep.Repository.NotesLabelEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("LabelId")
                        .HasColumnType("integer")
                        .HasColumnName("labelId");

                    b.Property<int>("NoteId")
                        .HasColumnType("integer")
                        .HasColumnName("noteId");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK__NotesLab__3213E83F5244A2E5");

                    b.HasIndex("LabelId");

                    b.HasIndex("NoteId");

                    b.HasIndex("UserId");

                    b.ToTable("NotesLabel", (string)null);
                });

            modelBuilder.Entity("GoKeep.Repository.RefreshTokenEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("GoKeep.Repository.UsersKeepEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("firstName");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("isActive");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("lastName");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("passwordHash");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updatedAt")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id")
                        .HasName("PK__UsersKee__3214EC07AFD68A99");

                    b.HasIndex(new[] { "Email" }, "UQ__UsersKeep__email")
                        .IsUnique();

                    b.ToTable("UsersKeep", (string)null);
                });

            modelBuilder.Entity("GoKeep.Repository.LabelEntity", b =>
                {
                    b.HasOne("GoKeep.Repository.UsersKeepEntity", "User")
                        .WithMany("Labels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Labels__UserId__40058253");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GoKeep.Repository.NoteEntity", b =>
                {
                    b.HasOne("GoKeep.Repository.UsersKeepEntity", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__Notes__userId__3864608B");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GoKeep.Repository.NotesLabelEntity", b =>
                {
                    b.HasOne("GoKeep.Repository.LabelEntity", "Label")
                        .WithMany("NotesLabels")
                        .HasForeignKey("LabelId")
                        .IsRequired()
                        .HasConstraintName("FK__NotesLabe__label__6AEFE058");

                    b.HasOne("GoKeep.Repository.NoteEntity", "Note")
                        .WithMany("NotesLabels")
                        .HasForeignKey("NoteId")
                        .IsRequired()
                        .HasConstraintName("FK__NotesLabe__noteI__69FBBC1F");

                    b.HasOne("GoKeep.Repository.UsersKeepEntity", "User")
                        .WithMany("NotesLabels")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__NotesLabel__UsersKeep__on__UserId");

                    b.Navigation("Label");

                    b.Navigation("Note");

                    b.Navigation("User");
                });

            modelBuilder.Entity("GoKeep.Repository.RefreshTokenEntity", b =>
                {
                    b.HasOne("GoKeep.Repository.UsersKeepEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("GoKeep.Repository.LabelEntity", b =>
                {
                    b.Navigation("NotesLabels");
                });

            modelBuilder.Entity("GoKeep.Repository.NoteEntity", b =>
                {
                    b.Navigation("NotesLabels");
                });

            modelBuilder.Entity("GoKeep.Repository.UsersKeepEntity", b =>
                {
                    b.Navigation("Labels");

                    b.Navigation("Notes");

                    b.Navigation("NotesLabels");
                });
#pragma warning restore 612, 618
        }
    }
}
